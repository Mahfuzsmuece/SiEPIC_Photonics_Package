def rawEHVA(EhvaDBConnection, server, user, password, database):
    
    query = """
       SELECT `r`.`result_id`, `r0`.`created`, `r0`.`name`, `r0`.`value`, `r0`.`domain`, `r0`.`description`, `r`.`component_id`, `c`.`name`, `c`.`description`, `m`.`name`, `m0`.`name`, `r`.`optical_port_id`, `r`.`electrical_port_id`, `r`.`die_id`, `r`.`reticle_id`, `r`.`wafer_id`, `r`.`id`, `c`.`id` as `component_id`, `m`.`id` as `domain_metric_id`, `m0`.`id` as `result_metric_id`, `e`.`id`, `e`.`created`, `e`.`description`, `e`.`metric_id`, `e`.`name`, `e`.`result_id`, `e`.`updated`, `e`.`value`
    FROM `result_summary` AS `r`
    INNER JOIN `component` AS `c` ON `r`.`component_id` = `c`.`id`
    INNER JOIN `result` AS `r0` ON `r`.`result_id` = `r0`.`id`
    INNER JOIN `metric` AS `m` ON `r`.`domain_metric_id` = `m`.`id`
    INNER JOIN `metric` AS `m0` ON `r`.`result_metric_id` = `m0`.`id`
    LEFT JOIN `experimental_condition` AS `e` ON `r0`.`id` = `e`.`result_id`
    ORDER BY `r`.`id`, `c`.`id`, `r0`.`id`, `m`.`id`, `m0`.`id`, `e`.`id` 
        """

    # Connecting to database, querying then disconnecting from database
    connection = EhvaDBConnection(server, user, password, database).connect()
    rawData = connection.query(query)
    connection.disconnect()
    return rawData

def cleanEHVAdata(rawData):
    """
    Processes a pandas dataframe created from an EHVA query
    Removes duplicate rows resulting from experimental conditions and creates a column for them instead
    
    Parameters
    ----------s
    rawdata : pandas dataframe
        EHVA database results in the form of a datafame
        
    Returns
    -------
    data : pandas dataframe
        Fixed EHVA database results with no duplicate rows 
    """

    
    ExperimentalConditions = rawData
    ExperimentalConditions.columns = ['result_id', 'created', 'result_name', 'result_value', 'result_domain', 'result_description',
       'component_id', 'component_name', 'component_description', 'domain_metric_name', 'result_metric_name', 'optical_port_id',
       'electrical_port_id', 'die_id', 'reticle_id', 'wafer_id', 'id', 'id',
       'id', 'id', 'id', 'id', 'created', 'description', 'metric_id', 'experimental_condition_name', 'result_id_',
       'updated', 'experimental_condition_value']
    ExperimentalConditions = ExperimentalConditions.pivot(index="result_id", columns="experimental_condition_name", values="experimental_condition_value")

    # Cleaning up data by removing duplicates from the experimental condition export and then removing extra information that is not needed (CURRENTLY)
    data = rawData.drop_duplicates(subset=['result_id'])
    data = data.drop(['experimental_condition_value','experimental_condition_name','id','description','updated','result_id_','metric_id'], axis=1)
    # Removing duplicate columns if any showed up
    data = data.loc[:,~data.columns.duplicated()]
    # Merging experimental conditions with original dataframe if they exist
    try:
        data['Voltage'] = ExperimentalConditions.Voltage
        data['Voltage'] = ExperimentalConditions['Voltage'].values
        data = data.reset_index()
    except Exception as e:
        print("Encountered error: %s" % e)
        print("Current data has no experimental condition for voltage")
        print("Adding dummy null column so that the rest of the script doesnt fail")
        DummyVoltage = [np.nan]*len(data.index)
        data['Voltage'] = DummyVoltage
        data = data.reset_index()
    return [data, ExperimentalConditions.Voltage]